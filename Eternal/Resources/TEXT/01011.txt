Triggers = {}

function Triggers.got_item(type, player)
	Global:got_item(type, player)
end

function Triggers.monster_damaged(monster, aggressor_monster, damage_type, damage_amount, projectile)
	Global:monster_damaged(monster, aggressor_monster, damage_type, damage_amount, projectile)
end

function Triggers.monster_killed(monster, aggressor_player, projectile)
	-- note: at least one polygon that's normally inaccessible must be set as "Must be explored", or this script will break
	-- note to self: find a less janky method to set this (repair mission maybe?)
	if monster.type == "mother of all cyborgs" then
		Controllers = Controllers - 1
		if Controllers <= 0 then
			for p in Polygons() do
				if p.type == "must be explored" then
					p.visible_on_automap = true -- so that the game doesn't regard the mission as unfinished
					p.type = 2
					for a in Annotations() do
						if a.polygon == p then
							a.text = "" -- so the annotation for mapmakers' benefit doesn't show up on the automap
						end
					end
				end
			end
			Level._done = true
			for m in Monsters() do
				if m.valid and not m.player then
					if m.type.class == "enforcer" then
						Enforcers = Enforcers + 1
					end
				end
			end
		end
	elseif monster.type.class == "enforcer" then
		if Level._done == true then
			Enforcers = Enforcers - 1
			if Enforcers <= 0 then
				for t in MonsterTypes() do
					if t.class == "cyborg" or t.class == "compiler" then
						t.enemies["player"] = false
						t.friends["player"] = true
						t.enemies["fighter"] = true
						t.enemies["trooper"] = true
						t.enemies["hunter"] = true
					elseif t.class == "drone" then
						t.enemies["player"] = false
						t.weaknesses["explosion"] = true
						t.weaknesses["projectile"] = true
						t.weaknesses["alien weapon"] = true
						t.weaknesses["hunter"] = true
						t.weaknesses["fists"] = true
						t.weaknesses["goo"] = true
						t.weaknesses["drone"] = true
						t.weaknesses["shotgun"] = true
					end
				end
				for m in Monsters() do
					if m.type.class == "bob" then
						m:damage(42,"claws")
					elseif m.valid and not m.player then
						if m.visible and m.active then
							if m.life > 0 then
								if m.type.class == "cyborg" or m.type.class == "drone" or m.type.class == "compiler" then
									m.life = m.life + 50
									m.active = false
								end
							end
						end
					end
				end
				Level._done = 2
				Level.stash["recalculate"] = "TRUE"
			end
		end
	end
end

function Triggers.player_damaged(victim, aggressor_player, aggressor_monster, damage_type, damage_amount, projectile)
	Global:player_damaged(victim, aggressor_player, aggressor_monster, damage_type, damage_amount, projectile)
end

function Triggers.player_killed(player, aggressor_player, action, projectile)
	Global:player_killed(player, aggressor_player, action, projectile)
end

function Triggers.player_revived(p)
	Global:player_revived(p, 7, 0, 0, 0, 0, 0, 150)
end

function Triggers.init(restoring)
	Global:initialize(restoring, 7, 0, 0, 0, 0, 0, 150)
	Level.stash["names"] = "physics1"
	Controllers = 0
	Enforcers = 0
	if not restoring then
		Level._done = false
	end
	for m in Monsters() do
		if m.type == "mother of all cyborgs" then
			Controllers = Controllers + 1
		end
	end
end

function Triggers.idle()
	Global:idlemain()
	--[[if Level._done == 2 then
		if Game.ticks % (Game.global_random(7)+1) == 0 then
			for m in Monsters() do
				if m.valid and not m.player then
					if m.visible and m.active then
						if m.type.class == "drone" then
							if m.index % (Game.global_random(7)+1) == 0 and not m.dead then
								m:damage(1,"claws")
							elseif m.index % (Game.random(7)+1) == 0 then
								m.active = false
							end
						end
					end
				end
			end
		end
	end--]]
end

function Triggers.cleanup()
	Global:cleanup()
end