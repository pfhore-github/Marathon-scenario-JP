CollectionsUsed = { 24 }
precipitation_collection = 24
precipitation_sequence = 18
precipitation_gravity = .03
precipitation_wind = .01

function build_pool()
	Level._pool = {}
	for i=1,precipitation_count do
		local x, y, z, p, t = uniform.xyz_in_triangle_list(Level._triangles)
		local e = Ephemera.new(x, y, z, p, precipitation_collection, precipitation_sequence, 0)
		e._triangle = t
		e._originalpoly = p
		table.insert(Level._pool, e)
	end
end

Triggers = {}

function precipitationpoly(p)
	if p.ceiling.transfer_mode == "landscape" and p.ceiling.collection == 27 and p.ceiling.texture_index == 1 then
		return true
	else
		return false
	end
end

function Triggers.got_item(type, player)
	Global:got_item(type, player)
end

function Triggers.monster_damaged(monster, aggressor_monster, damage_type, damage_amount, projectile)
	Global:monster_damaged(monster, aggressor_monster, damage_type, damage_amount, projectile)
end

function Triggers.player_damaged(victim, aggressor_player, aggressor_monster, damage_type, damage_amount, projectile)
	Global:player_damaged(victim, aggressor_player, aggressor_monster, damage_type, damage_amount, projectile)
end

function Triggers.player_killed(player, aggressor_player, action, projectile)
	Global:player_killed(player, aggressor_player, action, projectile)
end

function Triggers.player_revived(p)
	Global:player_revived(p, 7, 0, 0, 0, 0, 0, 150)
end

function Triggers.init(restoring)
	Global:initialize(restoring, 7, 0, 0, 0, 0, 0, 150)
	Global:initprecipitation(384)
	Level.stash["names"] = "standard"
	if not restoring then
		Global:ch4_hostilehulks(restoring)
	end
end

function Triggers.idle()
	Global:idlemain()
	Global:idleprecipitation()
end

function Triggers.cleanup()
	Global:cleanup()
end